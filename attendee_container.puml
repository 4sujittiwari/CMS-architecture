@startuml attendee_container
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml



!define osaPuml https://raw.githubusercontent.com/Crashedmind/PlantUML-opensecurityarchitecture2-icons/master
!include osaPuml/Common.puml
!include osaPuml/User/all.puml

!include <office/Servers/database_server>
!include <office/Servers/file_server>
!include <office/Servers/application_server>


!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define DEVICONS2 https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons2
!define MATERIAL https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/material
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!include DEVICONS/angular.puml
!include DEVICONS2/facebook.puml
!include MATERIAL/notifications.puml
!include MATERIAL/perm_identity.puml
!include MATERIAL/payment.puml
!include FONTAWESOME/users.puml

LAYOUT_WITH_LEGEND()

Person(attendee, "Attendee")
Container(portal, "Web Portal", "System")

AddContainerTag("webApp", $sprite="application_server", $legendText="web app container")
AddContainerTag("db", $sprite="database_server", $legendText="database container")
AddContainerTag("files", $sprite="file_server", $legendText="file server container")


System_Boundary(container, "Container") {
   Container(webApplication, "Web application", "technology", "Front end for all the users", $tags="webApp")

    Container(apiGateway, "API Gateway", "technology","To filter out the all the HTTP request")

    Container(identityManager, "Identity Manager", "OAuth", "User credentials and role", $sprite="perm_identity")

    ContainerDb(database, "Database", "technology","Database to persist", $tags="db")

    Container(storage, "Cloud Storage", "technology","Storage for images/banner/ppt/archivals", $tags="files")


    System_Boundary(backendServices, "Backend Services") {
        Container(notificationService, "Notification Service", "technology", "General notification service to send all types of notification to users based on rules")
        Container(userManagementService, "User Management Service", "technology", "Manages users/speakers and there interest")
        Container(contentService, "Content Service", "technology", "Give access to deck")
        Container(feedbackService, "Feedback Service", "technology", "Give feedback to crew/Sees Feedbacks from the attendees")
        Container(bookingService, "Booking Service", "technology", "Manage booking related information including conference")
    }

}

Container_Ext(notificationExt, "Notification System", "Software System", $sprite="notifications")
Container_Ext(payment, "Payment Gateway", "technology", "To Handle booking payments", $sprite="payment")



Rel(attendee, portal,"Uses","Portal")
Rel(portal, webApplication, "Provides","Way to configure UI Elements")
Rel(webApplication, apiGateway, "Filters", "All HTTPS Request")
Rel(apiGateway, identityManager, "Authroization", "Authorize the HTTP request")
Rel(apiGateway, backendServices, "Passes Request", "Passes the authroized request")
Rel(backendServices, database, "CRUD", "Read and Write data")
Rel(backendServices, storage, "CRUD", "Read and Write files")

Rel(backendServices, notificationExt, "Publish","Notifications")
Rel(backendServices, payment, "Transaction","Manages booking payments")



@enduml